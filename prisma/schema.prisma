generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model actualite_images {
  id           Int        @id @default(autoincrement())
  actualite_id Int
  image_url    String     @db.VarChar(255)
  actualites   actualites @relation(fields: [actualite_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "actualite_images_ibfk_1")

  @@index([actualite_id], map: "actualite_id")
}

model actualites {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  content          String             @db.Text
  created_date     DateTime           @default(now()) @db.Timestamp(0)
  last_updated     DateTime           @default(now()) @db.Timestamp(0)
  actualite_images actualite_images[]
}

model axes {
  id           Int          @id @default(autoincrement())
  plan_id      Int
  name         String       @db.VarChar(100)
  description  String?      @db.Text
  statut       String?      @db.VarChar(100)
  objectif     String?      @db.Text
  created_date DateTime     @default(now()) @db.Timestamp(0)
  last_updated DateTime     @default(now()) @db.Timestamp(0)
  plans_action plans_action @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "axes_ibfk_1")
  projets      projets[]

  @@index([plan_id], map: "plan_id")
}

model category_user {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String         @db.VarChar(255)
  created_date DateTime       @default(now()) @db.Timestamp(0)
  last_updated DateTime       @default(now()) @db.Timestamp(0)
  utilisateurs utilisateurs[]
}

model commentaires {
  id         Int      @id @default(autoincrement())
  project_id Int
  compte_id  Int
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  projets    projets  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "commentaires_ibfk_1")
  comptes    comptes  @relation(fields: [compte_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "commentaires_ibfk_2")

  @@index([compte_id], map: "compte_id")
  @@index([project_id], map: "project_id")
}

model comptes {
  id           Int              @id @default(autoincrement())
  username     String           @unique(map: "username") @db.VarChar(100)
  password     String           @db.VarChar(255)
  role_id      Int
  validity     comptes_validity @default(Y)
  user_id      Int?
  commentaires commentaires[]
  utilisateurs utilisateurs?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comptes_ibfk_1")
  roles        roles            @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comptes_ibfk_2")
  suggestions  suggestions[]
  votes        votes[]

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model documents {
  id          Int      @id @default(autoincrement())
  project_id  Int
  name        String   @db.VarChar(100)
  file_path   String?  @db.VarChar(255)
  uploaded_at DateTime @default(now()) @db.Timestamp(0)
  projets     projets  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "documents_ibfk_1")

  @@index([project_id], map: "project_id")
}

model evaluations {
  id              Int         @id @default(autoincrement())
  indicator_id    Int
  evaluation_date DateTime?   @db.Date
  value           Float?      @db.Float
  comment         String?     @db.Text
  indicateurs     indicateurs @relation(fields: [indicator_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluations_ibfk_1")

  @@index([indicator_id], map: "indicator_id")
}

model groupes {
  id                         Int                          @id @default(autoincrement())
  nom                        String                       @db.VarChar(255)
  projet_groupes             projet_groupes[]
  tache_assignations_groupes tache_assignations_groupes[]
   groupesUtilisateurs GroupesUtilisateurs[]
    Notification  notifications[]
}

model indicateurs {
  id             Int           @id @default(autoincrement())
  project_id     Int
  name           String        @db.VarChar(100)
  description    String?       @db.Text
  unit           String?       @db.VarChar(50)
  baseline_value Float?        @db.Float
  target_value   Float?        @db.Float
  current_value  Float?        @db.Float
  latitude       Float?        @db.Float 
  longitude      Float?        @db.Float
  created_date   DateTime      @default(now()) @db.Timestamp(0)
  last_updated   DateTime      @default(now()) @db.Timestamp(0)
  evaluations    evaluations[]
  projets        projets       @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "indicateurs_ibfk_1")

  @@index([project_id], map: "project_id")
}
model GroupesUtilisateurs {
  groupe_id       Int
  utilisateur_id  Int

  groupes         groupes      @relation(fields: [groupe_id], references: [id], onDelete: Cascade)
  utilisateurs    utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)

  @@id([groupe_id, utilisateur_id])
}

model newsletter {
  id                Int      @id @default(autoincrement())
  title             String?  @db.VarChar(200)
  body              String   @db.Text
  posted_by         Int      @default(0)
  created_date      DateTime @default(now()) @db.Timestamp(0)
  last_updated      DateTime @default(now()) @db.Timestamp(0)
  newsletter_statut String   @default("Y") @db.VarChar(5)

 @@index([title(length: 100), body(length: 100)], map: "newsletter_index")
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  description      String?            @db.Text
  created_date     DateTime           @default(now()) @db.Timestamp(0)
  last_updated     DateTime           @default(now()) @db.Timestamp(0)
  role_permissions role_permissions[]
}

model plans_action {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  description  String?   @db.Text
  objectif     String?   @db.Text
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  created_date DateTime  @default(now()) @db.Timestamp(0)
  last_updated DateTime  @default(now()) @db.Timestamp(0)
  axes         axes[]
}

model priority {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  created_date DateTime  @default(now()) @db.Timestamp(0)
  last_updated DateTime  @default(now()) @db.Timestamp(0)
  projets      projets[]
}

model projet_groupes {
  projet_id Int
  groupe_id Int
  projets   projets @relation(fields: [projet_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projet_groupes_ibfk_1")
  groupes   groupes @relation(fields: [groupe_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projet_groupes_ibfk_2")

  @@id([projet_id, groupe_id])
  @@index([groupe_id], map: "groupe_id")
}

model projet_utilisateurs {
  projet_id      Int
  utilisateur_id Int
  projets        projets      @relation(fields: [projet_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projet_utilisateurs_ibfk_1")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projet_utilisateurs_ibfk_2")

  @@id([projet_id, utilisateur_id])
  @@index([utilisateur_id], map: "utilisateur_id")
}

model projets {
  id                  Int                   @id @default(autoincrement())
  axe_id              Int
  priority_id         Int?
  manager             Int?
  name                String                @db.VarChar(500)
  description         String?               @db.Text
  objectif            String?               @db.Text
  statut              String?               @db.VarChar(100)
  budget              Int?
  start_date          DateTime?             @db.Date
  end_date            DateTime?             @db.Date
  created_date        DateTime              @default(now()) @db.Timestamp(0)
  last_updated        DateTime              @default(now()) @db.Timestamp(0)
  target_value        Float?                @db.Float
  current_value       Float?                @db.Float
  commentaires        commentaires[]
  documents           documents[]
  indicateurs         indicateurs[]
  projet_groupes      projet_groupes[]
  projet_utilisateurs projet_utilisateurs[]
  utilisateurs        utilisateurs?         @relation(fields: [manager], references: [id], onUpdate: Restrict, map: "projets_ibfk_1")
  axes                axes                  @relation(fields: [axe_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projets_ibfk_2")
  priority            priority?             @relation(fields: [priority_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "projets_ibfk_3")
  ressources          ressources[]
  suggestions         suggestions[]
  taches              taches[]

  @@index([axe_id], map: "axe_id")
  @@index([manager], map: "manager")
  @@index([priority_id], map: "priority_id")
}

model ressources {
  id          Int      @id @default(autoincrement())
  project_id  Int
  name        String   @db.VarChar(100)
  description String?  @db.Text
  quantity    Float?   @db.Float
  unit        String?  @db.VarChar(50)
  cost        Decimal? @db.Decimal(10, 2)
  projets     projets  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "ressources_ibfk_1")

  @@index([project_id], map: "project_id")
}

model role_permissions {
  role_id       Int
  permission_id Int
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_permissions_ibfk_1")
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_permissions_ibfk_2")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "permission_id")
}

model roles {
  id               Int                @id @default(autoincrement())
  nom              String             @db.VarChar(255)
  created_date     DateTime           @default(now()) @db.Timestamp(0)
  last_updated     DateTime           @default(now()) @db.Timestamp(0)
  comptes          comptes[]
  role_permissions role_permissions[]
}

model suggestions {
  id                 Int      @id @default(autoincrement())
  compte_id          Int
  project_id         Int
  suggestion_content String   @db.Text
  submitted_at       DateTime @default(now()) @db.Timestamp(0)
  comptes            comptes  @relation(fields: [compte_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "suggestions_ibfk_1")
  projets            projets  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "suggestions_ibfk_2")
 

  @@index([compte_id], map: "compte_id")
  @@index([project_id], map: "project_id")
}

model tache_assignations_groupes {
  tache_id  Int
  groupe_id Int
  taches    taches  @relation(fields: [tache_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tache_assignations_groupes_ibfk_1")
  groupes   groupes @relation(fields: [groupe_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tache_assignations_groupes_ibfk_2")

  @@id([tache_id, groupe_id])
  @@index([groupe_id], map: "groupe_id")
}

model tache_assignations_utilisateurs {
  tache_id       Int
  utilisateur_id Int
  taches         taches       @relation(fields: [tache_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tache_assignations_utilisateurs_ibfk_1")
  utilisateurs   utilisateurs @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tache_assignations_utilisateurs_ibfk_2")

  @@id([tache_id, utilisateur_id])
  @@index([utilisateur_id], map: "utilisateur_id")
}

model taches {
  id                Int       @id @default(autoincrement())
  libelle           String
  description       String?
  dateDebut         DateTime?
  dateFin           DateTime?
  projet_id         Int?
  utilisateur_id    Int?
  statut            String?
  priorite          String?
  dateCreation      DateTime  @default(now())
  dateMiseAJour     DateTime  @updatedAt
  delaiEstime       String?
  delaiReel         String?
  commentaires      String?
  tacheParentId     Int?
  tache_assignations_groupes      tache_assignations_groupes[]
  tache_assignations_utilisateurs tache_assignations_utilisateurs[]
  // Relations
  utilisateur       utilisateurs? @relation(fields: [utilisateur_id], references: [id], onUpdate: Restrict, map: "taches_ibfk_1")
  projet            projets?      @relation(fields: [projet_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "taches_ibfk_2")


  // Indexes
  @@index([projet_id], map: "projet_id")
  @@index([utilisateur_id], map: "utilisateur_id")
}



model utilisateurs {
  id                              Int                               @id @default(autoincrement())
  nom                             String                            @db.VarChar(100)
  prenom                          String                            @db.VarChar(100)
  email                           String                            @unique(map: "email") @db.VarChar(100)
  category_id                     Int?
  created_at                      DateTime                          @default(now()) @db.Timestamp(0)
  comptes                         comptes[]
  projet_utilisateurs             projet_utilisateurs[]
  projets                         projets[]
  tache_assignations_utilisateurs tache_assignations_utilisateurs[]
  taches                          taches[]
  category_user                   category_user?                    @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "utilisateurs_ibfk_1")

  @@index([category_id], map: "category_id")
  groupesUtilisateurs GroupesUtilisateurs[]
  Notification  notifications[]
  
}

model votes {
  id            Int         @id @default(autoincrement())
  compte_id     Int
  vote_value    Int?
  voted_at      DateTime    @default(now()) @db.Timestamp(0)
  comptes       comptes     @relation(fields: [compte_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "votes_ibfk_1")


  @@index([compte_id], map: "compte_id")
 
}

model notifications {
  id             Int               @id @default(autoincrement())
  titre          String            // Titre de la notification
  message        String            // Contenu détaillé
  type           String            // Type (ex : "Alerte", "Rappel")
  isRead         Boolean           @default(false) // Statut de lecture
  createdAt      DateTime          @default(now()) // Date d'envoi
  userId         Int?              // ID d'utilisateur individuel (optionnel)
  groupeId       Int?              // ID du groupe (optionnel)

  user           utilisateurs?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupe         groupes?           @relation(fields: [groupeId], references: [id], onDelete: Cascade)

  @@index([type, createdAt]) // Index pour les recherches rapides
}

enum comptes_validity {
  D
  Y
  N
}
